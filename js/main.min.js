<<<<<<< HEAD
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function detachBefore(after) {
		while (after.previousSibling) {
			after.parentNode.removeChild(after.previousSibling);
		}
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var proto = {
		destroy,
		get,
		fire,
		on,
		set,
		_recompute: noop,
		_set,
		_mount,
		_differs
	};

	/* src/components/AboutMe.html generated by Svelte v2.9.4 */

	function create_main_fragment(component, ctx) {
		var h4, text_1, span_1;

		return {
			c: function c() {
				h4 = createElement("h4");
				h4.innerHTML = "<span>About me</span>";
				text_1 = createText("\n  ");
				span_1 = createElement("span");
				span_1.innerHTML = "I'm a Ph.D. student working in the <a class=\"uk-link-muted\">Visual Computing</a> group of Prof. Deussen at the University of Konstanz. My area of research is information visualization, with a focus on visualization of uncertainty. I'm curious to work on challenging problems and understand their theoretical and mathematical foundations.";
				h4.className = "uk-heading-line";
				span_1.className = "uk-text";
			},
			m: function m(target, anchor) {
				insertNode(h4, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(span_1, target, anchor);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(h4);
					detachNode(text_1);
					detachNode(span_1);
				}
			}
		};
	}

	function AboutMe(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(AboutMe.prototype, proto);

	/* src/components/Cv.html generated by Svelte v2.9.4 */

	function data() {
		return {
			entries: [{
				'when': '2016-now',
				'what': 'Ph.D. in Computer Science',
				'where': 'Visual Computing Group - Prof. Deussen, University of Konstanz',
				'desc': 'Topic: Uncertainty Quantification and Analysis in Visual Computing'
			}, {
				'when': '2012-2015',
				'what': 'M.Sc. <u>with distinction</u> in Computer Science',
				'where': 'Karlsruhe Institute of Technology',
				'desc': 'Thesis: Superpixels for identifying structures in laparoscopic surgery'
			}, {
				'when': '02/2014-07/2014',
				'what': 'Voluntary Internship',
				'where': 'KUKA Laboratories GmbH',
				'desc': 'Efficient implementation of a RANSAC-based algorithm for object recognition in point- clouds. Automation of the build process for external libraries in a cross-platform environ- ment using CMake.'
			}, {
				'when': '2008-2012',
				'what': 'B.Sc. in Computer Science',
				'where': 'Karlsruhe Institute of Technology',
				'desc': 'Thesis: Visualization concept for laparoscopy using augmented reality'
			}]
		};
	}
	function create_main_fragment$1(component, ctx) {
		var h4, text_1, ul;

		var each_value = ctx.entries;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c: function c() {
				h4 = createElement("h4");
				h4.innerHTML = "<span>CV</span>";
				text_1 = createText("\n");
				ul = createElement("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				h4.className = "uk-heading-line";
				ul.className = "uk-list uk-list-divider";
			},
			m: function m(target, anchor) {
				insertNode(h4, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(ul, target, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}
			},
			p: function p(changed, ctx) {
				if (changed.entries) {
					each_value = ctx.entries;

					for (var i = 0; i < each_value.length; i += 1) {
						var child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(h4);
					detachNode(text_1);
					detachNode(ul);
				}

				destroyEach(each_blocks, detach);
			}
		};
	}

	// (3:2) {#each entries as e}
	function create_each_block(component, ctx) {
		var li,
		    div,
		    div_1,
		    span,
		    text_value = ctx.e.when,
		    text,
		    text_1,
		    div_2,
		    div_3,
		    raw_value = ctx.e.what,
		    raw_after,
		    text_2,
		    span_1,
		    text_3,
		    text_4_value = ctx.e.where,
		    text_4,
		    text_5,
		    div_4,
		    span_2,
		    text_6_value = ctx.e.desc,
		    text_6;

		return {
			c: function c() {
				li = createElement("li");
				div = createElement("div");
				div_1 = createElement("div");
				span = createElement("span");
				text = createText(text_value);
				text_1 = createText("\n      ");
				div_2 = createElement("div");
				div_3 = createElement("div");
				raw_after = createElement('noscript');
				text_2 = createText(" ");
				span_1 = createElement("span");
				text_3 = createText("// ");
				text_4 = createText(text_4_value);
				text_5 = createText("\n        ");
				div_4 = createElement("div");
				span_2 = createElement("span");
				text_6 = createText(text_6_value);
				span.className = "uk-text-small";
				div_1.className = "uk-width-1-6";
				span_1.className = "uk-text-meta";
				span_2.className = "uk-text-small";
				div_2.className = "uk-width-expand";
				setAttribute(div, "uk-grid", true);
			},
			m: function m(target, anchor) {
				insertNode(li, target, anchor);
				appendNode(div, li);
				appendNode(div_1, div);
				appendNode(span, div_1);
				appendNode(text, span);
				appendNode(text_1, div);
				appendNode(div_2, div);
				appendNode(div_3, div_2);
				appendNode(raw_after, div_3);
				raw_after.insertAdjacentHTML("beforebegin", raw_value);
				appendNode(text_2, div_3);
				appendNode(span_1, div_3);
				appendNode(text_3, span_1);
				appendNode(text_4, span_1);
				appendNode(text_5, div_2);
				appendNode(div_4, div_2);
				appendNode(span_2, div_4);
				appendNode(text_6, span_2);
			},
			p: function p(changed, ctx) {
				if (changed.entries && text_value !== (text_value = ctx.e.when)) {
					text.data = text_value;
				}

				if (changed.entries && raw_value !== (raw_value = ctx.e.what)) {
					detachBefore(raw_after);
					raw_after.insertAdjacentHTML("beforebegin", raw_value);
				}

				if (changed.entries && text_4_value !== (text_4_value = ctx.e.where)) {
					text_4.data = text_4_value;
				}

				if (changed.entries && text_6_value !== (text_6_value = ctx.e.desc)) {
					text_6.data = text_6_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(li);
				}
			}
		};
	}

	function get_each_context(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.e = list[i];
		child_ctx.each_value = list;
		child_ctx.e_index = i;
		return child_ctx;
	}

	function Cv(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Cv.prototype, proto);

	/* src/components/Footer.html generated by Svelte v2.9.4 */

	function create_main_fragment$2(component, ctx) {
		var div;

		return {
			c: function c() {
				div = createElement("div");
				div.innerHTML = "<span class=\"uk-text-meta\">© Jochen Görtler 2018.</span>";
				div.className = "uk-background-muted uk-margin-top uk-padding-small uk-text-center";
			},
			m: function m(target, anchor) {
				insertNode(div, target, anchor);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	function Footer(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._fragment = create_main_fragment$2(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Footer.prototype, proto);

	/* src/components/Misc.html generated by Svelte v2.9.4 */

	function create_main_fragment$3(component, ctx) {
		var h4, text_1, p, text_3, div;

		return {
			c: function c() {
				h4 = createElement("h4");
				h4.innerHTML = "<span>Misc</span>";
				text_1 = createText("\n");
				p = createElement("p");
				p.textContent = "When I'm not spending time with my family or working, you often find me with friends in the mountains going backcountry skiing or climbing. I also enjoy traveling and exploring new places. Below are some photos that I took along the way.";
				text_3 = createText("\n");
				div = createElement("div");
				div.innerHTML = "<div><img data-src=\"images/ny.jpg\" alt=\"Manhattan skyline from Brooklyn Bridge\" uk-img=\"\"></div>\n  <div class=\"uk-margin-left\"><img data-src=\"images/stein.jpg\" alt=\"Skitouring in the Swiss alps\" uk-img=\"\"></div>\n  <div class=\"uk-margin-left\"><img data-src=\"images/qingdao.jpg\" alt=\"Lighthouse in Qingdao\" uk-img=\"\"></div>\n  <div class=\"uk-margin-left\"><img data-src=\"images/zimba.jpg\" alt=\"View of the Austrian alps\" uk-img=\"\"></div>";
				h4.className = "uk-heading-line";
				p.className = "uk-text";
				div.className = "uk-flex uk-flex-center@s";
			},
			m: function m(target, anchor) {
				insertNode(h4, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(p, target, anchor);
				insertNode(text_3, target, anchor);
				insertNode(div, target, anchor);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(h4);
					detachNode(text_1);
					detachNode(p);
					detachNode(text_3);
					detachNode(div);
				}
			}
		};
	}

	function Misc(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._fragment = create_main_fragment$3(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Misc.prototype, proto);

	/* src/components/Profile.html generated by Svelte v2.9.4 */

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1p1juv7-style';
		style.textContent = ".svelte-ref-portrait.svelte-1p1juv7{border-radius:50%;border:1px solid #e5e5e5}";
		appendNode(style, document.head);
	}

	function create_main_fragment$4(component, ctx) {
		var div, text_1, div_1, img, text_2, div_2;

		return {
			c: function c() {
				div = createElement("div");
				div.innerHTML = "<h2>Jochen Görtler</h2>";
				text_1 = createText("\n");
				div_1 = createElement("div");
				img = createElement("img");
				text_2 = createText("\n");
				div_2 = createElement("div");
				div_2.innerHTML = "<div class=\"uk-grid-collapse  uk-text-center\" uk-grid=\"\"><div class=\"uk-padding-small\"><a href=\"mailto:info@jgoertler.com\" target=\"_blank\"><span uk-icon=\"icon: mail\"></span> Mail</a></div>\n    <div class=\"uk-padding-small\"><a href=\"https://www.github.com/grtlr\" target=\"_blank\"><span uk-icon=\"icon: github-alt\"></span> Github</a></div>\n    <div class=\"uk-padding-small\"><a href=\"https://www.cgmi.uni-konstanz.de/personen/wissenschaftliche-mitarbeiterinnen/jochen-goertler/\" target=\"_blank\"><span uk-icon=\"icon: location\"></span> University of Konstanz</a></div>\n    <div class=\"uk-padding-small\"><a href=\"https://scholar.google.de/citations?user=PjRS0WAAAAAJ\" target=\"_blank\"><span uk-icon=\"icon: google\"></span> Google Scholar</a></div></div>";
				div.className = "uk-container uk-text-center";
				img.dataset.src = "./images/portrait.png";
				img.width = "100";
				img.height = "auto";
				img.alt = "Portrait";
				setAttribute(img, "uk-img", true);
				img.className = "svelte-1p1juv7 svelte-ref-portrait";
				div_1.className = "uk-container uk-text-center";
				div_2.className = "uk-flex uk-flex-center uk-margin-bottom";
			},
			m: function m(target, anchor) {
				insertNode(div, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(div_1, target, anchor);
				appendNode(img, div_1);
				component.refs.portrait = img;
				insertNode(text_2, target, anchor);
				insertNode(div_2, target, anchor);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(div);
					detachNode(text_1);
					detachNode(div_1);
				}

				if (component.refs.portrait === img) component.refs.portrait = null;
				if (detach) {
					detachNode(text_2);
					detachNode(div_2);
				}
			}
		};
	}

	function Profile(options) {
		init(this, options);
		this.refs = {};
		this._state = assign({}, options.data);
		this._intro = true;

		if (!document.getElementById("svelte-1p1juv7-style")) add_css();

		this._fragment = create_main_fragment$4(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Profile.prototype, proto);

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var bibtexParse = createCommonjsModule(function (module, exports) {
	/* start bibtexParse 0.0.24 */

	//Original work by Henrik Muehe (c) 2010
	//
	//CommonJS port by Mikola Lysenko 2013
	//
	//Port to Browser lib by ORCID / RCPETERS
	//
	//Issues:
	//no comment handling within strings
	//no string concatenation
	//no variable values yet
	//Grammar implemented here:
	//bibtex -> (string | preamble | comment | entry)*;
	//string -> '@STRING' '{' key_equals_value '}';
	//preamble -> '@PREAMBLE' '{' value '}';
	//comment -> '@COMMENT' '{' value '}';
	//entry -> '@' key '{' key ',' key_value_list '}';
	//key_value_list -> key_equals_value (',' key_equals_value)*;
	//key_equals_value -> key '=' value;
	//value -> value_quotes | value_braces | key;
	//value_quotes -> '"' .*? '"'; // not quite
	//value_braces -> '{' .*? '"'; // not quite
	(function(exports) {

	    function BibtexParser() {

	        this.months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
	        this.notKey = [',','{','}',' ','='];
	        this.pos = 0;
	        this.input = "";
	        this.entries = new Array();

	        this.currentEntry = "";

	        this.setInput = function(t) {
	            this.input = t;
	        };

	        this.getEntries = function() {
	            return this.entries;
	        };

	        this.isWhitespace = function(s) {
	            return (s == ' ' || s == '\r' || s == '\t' || s == '\n');
	        };

	        this.match = function(s, canCommentOut) {
	            if (canCommentOut == undefined || canCommentOut == null)
	                canCommentOut = true;
	            this.skipWhitespace(canCommentOut);
	            if (this.input.substring(this.pos, this.pos + s.length) == s) {
	                this.pos += s.length;
	            } else {
	                throw "Token mismatch, expected " + s + ", found "
	                        + this.input.substring(this.pos);
	            }            this.skipWhitespace(canCommentOut);
	        };

	        this.tryMatch = function(s, canCommentOut) {
	            if (canCommentOut == undefined || canCommentOut == null)
	                canCommentOut = true;
	            this.skipWhitespace(canCommentOut);
	            if (this.input.substring(this.pos, this.pos + s.length) == s) {
	                return true;
	            } else {
	                return false;
	            }            this.skipWhitespace(canCommentOut);
	        };

	        /* when search for a match all text can be ignored, not just white space */
	        this.matchAt = function() {
	            while (this.input.length > this.pos && this.input[this.pos] != '@') {
	                this.pos++;
	            }
	            if (this.input[this.pos] == '@') {
	                return true;
	            }            return false;
	        };

	        this.skipWhitespace = function(canCommentOut) {
	            while (this.isWhitespace(this.input[this.pos])) {
	                this.pos++;
	            }            if (this.input[this.pos] == "%" && canCommentOut == true) {
	                while (this.input[this.pos] != "\n") {
	                    this.pos++;
	                }                this.skipWhitespace(canCommentOut);
	            }        };

	        this.value_braces = function() {
	            var bracecount = 0;
	            this.match("{", false);
	            var start = this.pos;
	            var escaped = false;
	            while (true) {
	                if (!escaped) {
	                    if (this.input[this.pos] == '}') {
	                        if (bracecount > 0) {
	                            bracecount--;
	                        } else {
	                            var end = this.pos;
	                            this.match("}", false);
	                            return this.input.substring(start, end);
	                        }                    } else if (this.input[this.pos] == '{') {
	                        bracecount++;
	                    } else if (this.pos >= this.input.length - 1) {
	                        throw "Unterminated value";
	                    }                }                if (this.input[this.pos] == '\\' && escaped == false)
	                    escaped = true;
	                else
	                    escaped = false;
	                this.pos++;
	            }        };

	        this.value_comment = function() {
	            var str = '';
	            var brcktCnt = 0;
	            while (!(this.tryMatch("}", false) && brcktCnt == 0)) {
	                str = str + this.input[this.pos];
	                if (this.input[this.pos] == '{')
	                    brcktCnt++;
	                if (this.input[this.pos] == '}')
	                    brcktCnt--;
	                if (this.pos >= this.input.length - 1) {
	                    throw "Unterminated value:" + this.input.substring(start);
	                }                this.pos++;
	            }            return str;
	        };

	        this.value_quotes = function() {
	            this.match('"', false);
	            var start = this.pos;
	            var escaped = false;
	            while (true) {
	                if (!escaped) {
	                    if (this.input[this.pos] == '"') {
	                        var end = this.pos;
	                        this.match('"', false);
	                        return this.input.substring(start, end);
	                    } else if (this.pos >= this.input.length - 1) {
	                        throw "Unterminated value:" + this.input.substring(start);
	                    }                }
	                if (this.input[this.pos] == '\\' && escaped == false)
	                    escaped = true;
	                else
	                    escaped = false;
	                this.pos++;
	            }        };

	        this.single_value = function() {
	            var start = this.pos;
	            if (this.tryMatch("{")) {
	                return this.value_braces();
	            } else if (this.tryMatch('"')) {
	                return this.value_quotes();
	            } else {
	                var k = this.key();
	                if (k.match("^[0-9]+$"))
	                    return k;
	                else if (this.months.indexOf(k.toLowerCase()) >= 0)
	                    return k.toLowerCase();
	                else
	                    throw "Value expected:" + this.input.substring(start) + ' for key: ' + k;

	            }        };

	        this.value = function() {
	            var values = [];
	            values.push(this.single_value());
	            while (this.tryMatch("#")) {
	                this.match("#");
	                values.push(this.single_value());
	            }            return values.join("");
	        };

	        this.key = function(optional) {
	            var start = this.pos;
	            while (true) {
	                if (this.pos >= this.input.length) {
	                    throw "Runaway key";
	                }                                // а-яА-Я is Cyrillic
	                //console.log(this.input[this.pos]);
	                if (this.notKey.indexOf(this.input[this.pos]) >= 0) {
	                    if (optional && this.input[this.pos] != ',') {
	                        this.pos = start;
	                        return null;
	                    }                    return this.input.substring(start, this.pos);
	                } else {
	                    this.pos++;

	                }            }        };

	        this.key_equals_value = function() {
	            var key = this.key();
	            if (this.tryMatch("=")) {
	                this.match("=");
	                var val = this.value();
	                key = key.trim();
	                return [ key, val ];
	            } else {
	                throw "... = value expected, equals sign missing:"
	                        + this.input.substring(this.pos);
	            }        };

	        this.key_value_list = function() {
	            var kv = this.key_equals_value();
	            this.currentEntry['entryTags'] = {};
	            this.currentEntry['entryTags'][kv[0]] = kv[1];
	            while (this.tryMatch(",")) {
	                this.match(",");
	                // fixes problems with commas at the end of a list
	                if (this.tryMatch("}")) {
	                    break;
	                }
	                kv = this.key_equals_value();
	                this.currentEntry['entryTags'][kv[0]] = kv[1];
	            }        };

	        this.entry_body = function(d) {
	            this.currentEntry = {};
	            this.currentEntry['citationKey'] = this.key(true);
	            this.currentEntry['entryType'] = d.substring(1);
	            if (this.currentEntry['citationKey'] != null) {
	                this.match(",");
	            }
	            this.key_value_list();
	            this.entries.push(this.currentEntry);
	        };

	        this.directive = function() {
	            this.match("@");
	            return "@" + this.key();
	        };

	        this.preamble = function() {
	            this.currentEntry = {};
	            this.currentEntry['entryType'] = 'PREAMBLE';
	            this.currentEntry['entry'] = this.value_comment();
	            this.entries.push(this.currentEntry);
	        };

	        this.comment = function() {
	            this.currentEntry = {};
	            this.currentEntry['entryType'] = 'COMMENT';
	            this.currentEntry['entry'] = this.value_comment();
	            this.entries.push(this.currentEntry);
	        };

	        this.entry = function(d) {
	            this.entry_body(d);
	        };

	        this.alernativeCitationKey = function () {
	            this.entries.forEach(function (entry) {
	                if (!entry.citationKey && entry.entryTags) {
	                    entry.citationKey = '';
	                    if (entry.entryTags.author) {
	                        entry.citationKey += entry.entryTags.author.split(',')[0] += ', ';
	                    }
	                    entry.citationKey += entry.entryTags.year;
	                }
	            });
	        };

	        this.bibtex = function() {
	            while (this.matchAt()) {
	                var d = this.directive();
	                this.match("{");
	                if (d.toUpperCase() == "@STRING") {
	                    this.string();
	                } else if (d.toUpperCase() == "@PREAMBLE") {
	                    this.preamble();
	                } else if (d.toUpperCase() == "@COMMENT") {
	                    this.comment();
	                } else {
	                    this.entry(d);
	                }
	                this.match("}");
	            }
	            this.alernativeCitationKey();
	        };
	    }
	    exports.toJSON = function(bibtex) {
	        var b = new BibtexParser();
	        b.setInput(bibtex);
	        b.bibtex();
	        return b.entries;
	    };

	    /* added during hackathon don't hate on me */
	    exports.toBibtex = function(json) {
	        var out = '';
	        for ( var i in json) {
	            out += "@" + json[i].entryType;
	            out += '{';
	            if (json[i].citationKey)
	                out += json[i].citationKey + ', ';
	            if (json[i].entry)
	                out += json[i].entry ;
	            if (json[i].entryTags) {
	                var tags = '';
	                for (var jdx in json[i].entryTags) {
	                    if (tags.length != 0)
	                        tags += ', ';
	                    tags += jdx + '= {' + json[i].entryTags[jdx] + '}';
	                }
	                out += tags;
	            }
	            out += '}\n\n';
	        }
	        return out;

	    };

	})(exports);

	/* end bibtexParse */
	});

	/* src/components/Authors.html generated by Svelte v2.9.4 */

	function authorList(_ref) {
		var authors = _ref.authors;

		return authors.replace('-', ' ').split(' and ');
	}

	function data$1() {
		return {
			authors: ''
		};
	}
	function shorten(str) {
		var tokens = str.split(' ');
		var lastName = tokens.pop();
		var combined = tokens.map(function (t) {
			return t[0];
		}).join('');
		return combined + ' ' + lastName;
	}
	function create_main_fragment$5(component, ctx) {
		var each_anchor;

		var each_value = ctx.authorList;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$1(component, get_each_context$1(ctx, each_value, i));
		}

		return {
			c: function c() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},
			m: function m(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.authorList) {
					each_value = ctx.authorList;

					for (var i = 0; i < each_value.length; i += 1) {
						var child_ctx = get_each_context$1(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block$1(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},
			d: function d(detach) {
				destroyEach(each_blocks, detach);

				if (detach) {
					detachNode(each_anchor);
				}
			}
		};
	}

	// (1:0) {#each authorList as a, idx}
	function create_each_block$1(component, ctx) {
		var if_block_anchor;

		function select_block_type(ctx) {
			if (ctx.idx < ctx.authorList.length - 1) return create_if_block;
			return create_if_block_1;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function c() {
				if_block.c();
				if_block_anchor = createComment();
			},
			m: function m(target, anchor) {
				if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},
			p: function p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			d: function d(detach) {
				if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (2:0) {#if idx < authorList.length - 1}
	function create_if_block(component, ctx) {
		var text_value = shorten(ctx.a) + ', ',
		    text;

		return {
			c: function c() {
				text = createText(text_value);
			},
			m: function m(target, anchor) {
				insertNode(text, target, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.authorList && text_value !== (text_value = shorten(ctx.a) + ', ')) {
					text.data = text_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(text);
				}
			}
		};
	}

	// (4:0) {:else}
	function create_if_block_1(component, ctx) {
		var text_value = shorten(ctx.a),
		    text;

		return {
			c: function c() {
				text = createText(text_value);
			},
			m: function m(target, anchor) {
				insertNode(text, target, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.authorList && text_value !== (text_value = shorten(ctx.a))) {
					text.data = text_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(text);
				}
			}
		};
	}

	function get_each_context$1(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.a = list[i];
		child_ctx.each_value = list;
		child_ctx.idx = i;
		return child_ctx;
	}

	function Authors(options) {
		init(this, options);
		this._state = assign(data$1(), options.data);
		this._recompute({ authors: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$5(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Authors.prototype, proto);

	Authors.prototype._recompute = function _recompute(changed, state) {
		if (changed.authors) {
			if (this._differs(state.authorList, state.authorList = authorList(state))) changed.authorList = true;
		}
	};

	/* src/components/Doi.html generated by Svelte v2.9.4 */

	function data$2() {
		return {
			doi: ''
		};
	}
	function create_main_fragment$6(component, ctx) {
		var a, span, span_1, text, text_1, a_href_value;

		return {
			c: function c() {
				a = createElement("a");
				span = createElement("span");
				span_1 = createElement("span");
				text = createText(" ");
				text_1 = createText(ctx.doi);
				setAttribute(span_1, "uk-icon", "icon: world; ratio: 0.7");
				span.className = "uk-text-small";
				a.href = a_href_value = "https://doi.org/" + ctx.doi;
				a.target = "_blank";
			},
			m: function m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(span, a);
				appendNode(span_1, span);
				appendNode(text, span);
				appendNode(text_1, span);
			},
			p: function p(changed, ctx) {
				if (changed.doi) {
					text_1.data = ctx.doi;
				}

				if (changed.doi && a_href_value !== (a_href_value = "https://doi.org/" + ctx.doi)) {
					a.href = a_href_value;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(a);
				}
			}
		};
	}

	function Doi(options) {
		init(this, options);
		this._state = assign(data$2(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$6(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Doi.prototype, proto);

	/* src/components/InProceedings.html generated by Svelte v2.9.4 */

	function data$3() {
		return {
			booktitle: '',
			pages: ''
		};
	}
	function create_main_fragment$7(component, ctx) {
		var text, text_1, text_2;

		return {
			c: function c() {
				text = createText(ctx.booktitle);
				text_1 = createText(": ");
				text_2 = createText(ctx.pages);
			},
			m: function m(target, anchor) {
				insertNode(text, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(text_2, target, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.booktitle) {
					text.data = ctx.booktitle;
				}

				if (changed.pages) {
					text_2.data = ctx.pages;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(text);
					detachNode(text_1);
					detachNode(text_2);
				}
			}
		};
	}

	function InProceedings(options) {
		init(this, options);
		this._state = assign(data$3(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$7(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(InProceedings.prototype, proto);

	/* src/components/Journal.html generated by Svelte v2.9.4 */

	function data$4() {
		return {
			journal: '',
			volume: '',
			number: '',
			pages: '',
			year: ''
		};
	}
	function create_main_fragment$8(component, ctx) {
		var text, text_1, text_2, text_3, text_4, text_5, text_6, text_7, text_8, text_9;

		return {
			c: function c() {
				text = createText(ctx.journal);
				text_1 = createText(", ");
				text_2 = createText(ctx.volume);
				text_3 = createText("(");
				text_4 = createText(ctx.number);
				text_5 = createText("): ");
				text_6 = createText(ctx.pages);
				text_7 = createText(" (");
				text_8 = createText(ctx.year);
				text_9 = createText(")");
			},
			m: function m(target, anchor) {
				insertNode(text, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(text_2, target, anchor);
				insertNode(text_3, target, anchor);
				insertNode(text_4, target, anchor);
				insertNode(text_5, target, anchor);
				insertNode(text_6, target, anchor);
				insertNode(text_7, target, anchor);
				insertNode(text_8, target, anchor);
				insertNode(text_9, target, anchor);
			},
			p: function p(changed, ctx) {
				if (changed.journal) {
					text.data = ctx.journal;
				}

				if (changed.volume) {
					text_2.data = ctx.volume;
				}

				if (changed.number) {
					text_4.data = ctx.number;
				}

				if (changed.pages) {
					text_6.data = ctx.pages;
				}

				if (changed.year) {
					text_8.data = ctx.year;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(text);
					detachNode(text_1);
					detachNode(text_2);
					detachNode(text_3);
					detachNode(text_4);
					detachNode(text_5);
					detachNode(text_6);
					detachNode(text_7);
					detachNode(text_8);
					detachNode(text_9);
				}
			}
		};
	}

	function Journal(options) {
		init(this, options);
		this._state = assign(data$4(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$8(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Journal.prototype, proto);

	/* src/components/Publication.html generated by Svelte v2.9.4 */

	function data$5() {
		return { entry: {} };
	}
	function stripBraces(str) {
		return str.replace('{', '').replace('}', '');
	}
	function dash(str) {
		return str.replace('--', '-');
	}
	function create_main_fragment$9(component, ctx) {
		var div,
		    div_1,
		    span,
		    text_value = ctx.entry.entryTags.title,
		    text,
		    text_1,
		    div_2,
		    span_1,
		    text_2,
		    div_3,
		    span_2,
		    text_4;

		var authors_initial_data = { authors: ctx.entry.entryTags.author };
		var authors = new Authors({
			root: component.root,
			store: component.store,
			data: authors_initial_data
		});

		function select_block_type(ctx) {
			if (ctx.entry.entryTags.journal) return create_if_block$1;
			if (ctx.entry.entryTags.booktitle) return create_if_block_1$1;
			return null;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type && current_block_type(component, ctx);

		var if_block_2 = ctx.entry.entryTags.doi && create_if_block_2(component, ctx);

		return {
			c: function c() {
				div = createElement("div");
				div_1 = createElement("div");
				span = createElement("span");
				text = createText(text_value);
				text_1 = createText("\n  ");
				div_2 = createElement("div");
				span_1 = createElement("span");
				authors._fragment.c();
				text_2 = createText("\n  ");
				div_3 = createElement("div");
				span_2 = createElement("span");
				if (if_block) if_block.c();
				text_4 = createText("\n  ");
				if (if_block_2) if_block_2.c();
				span.className = "uk-text";
				span_1.className = "uk-text uk-text-small";
				span_2.className = "uk-text-small";
			},
			m: function m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(span, div_1);
				appendNode(text, span);
				appendNode(text_1, div);
				appendNode(div_2, div);
				appendNode(span_1, div_2);
				authors._mount(span_1, null);
				appendNode(text_2, div);
				appendNode(div_3, div);
				appendNode(span_2, div_3);
				if (if_block) if_block.m(span_2, null);
				appendNode(text_4, div);
				if (if_block_2) if_block_2.m(div, null);
			},
			p: function p(changed, ctx) {
				if (changed.entry && text_value !== (text_value = ctx.entry.entryTags.title)) {
					text.data = text_value;
				}

				var authors_changes = {};
				if (changed.entry) authors_changes.authors = ctx.entry.entryTags.author;
				authors._set(authors_changes);

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(component, ctx);
					if (if_block) if_block.c();
					if (if_block) if_block.m(span_2, null);
				}

				if (ctx.entry.entryTags.doi) {
					if (if_block_2) {
						if_block_2.p(changed, ctx);
					} else {
						if_block_2 = create_if_block_2(component, ctx);
						if_block_2.c();
						if_block_2.m(div, null);
					}
				} else if (if_block_2) {
					if_block_2.d(1);
					if_block_2 = null;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				authors.destroy();
				if (if_block) if_block.d();
				if (if_block_2) if_block_2.d();
			}
		};
	}

	// (5:4) {#if entry.entryTags.journal}
	function create_if_block$1(component, ctx) {

		var journal_initial_data = {
			journal: stripBraces(ctx.entry.entryTags.journal),
			volume: ctx.entry.entryTags.volume,
			number: ctx.entry.entryTags.number,
			pages: dash(ctx.entry.entryTags.pages),
			year: ctx.entry.entryTags.year
		};
		var journal = new Journal({
			root: component.root,
			store: component.store,
			data: journal_initial_data
		});

		return {
			c: function c() {
				journal._fragment.c();
			},
			m: function m(target, anchor) {
				journal._mount(target, anchor);
			},
			p: function p(changed, ctx) {
				var journal_changes = {};
				if (changed.entry) journal_changes.journal = stripBraces(ctx.entry.entryTags.journal);
				if (changed.entry) journal_changes.volume = ctx.entry.entryTags.volume;
				if (changed.entry) journal_changes.number = ctx.entry.entryTags.number;
				if (changed.entry) journal_changes.pages = dash(ctx.entry.entryTags.pages);
				if (changed.entry) journal_changes.year = ctx.entry.entryTags.year;
				journal._set(journal_changes);
			},
			d: function d(detach) {
				journal.destroy(detach);
			}
		};
	}

	// (13:39) 
	function create_if_block_1$1(component, ctx) {

		var inproceedings_initial_data = {
			booktitle: ctx.entry.entryTags.booktitle,
			pages: dash(ctx.entry.entryTags.pages)
		};
		var inproceedings = new InProceedings({
			root: component.root,
			store: component.store,
			data: inproceedings_initial_data
		});

		return {
			c: function c() {
				inproceedings._fragment.c();
			},
			m: function m(target, anchor) {
				inproceedings._mount(target, anchor);
			},
			p: function p(changed, ctx) {
				var inproceedings_changes = {};
				if (changed.entry) inproceedings_changes.booktitle = ctx.entry.entryTags.booktitle;
				if (changed.entry) inproceedings_changes.pages = dash(ctx.entry.entryTags.pages);
				inproceedings._set(inproceedings_changes);
			},
			d: function d(detach) {
				inproceedings.destroy(detach);
			}
		};
	}

	// (20:2) {#if entry.entryTags.doi}
	function create_if_block_2(component, ctx) {
		var div;

		var doi_initial_data = { doi: ctx.entry.entryTags.doi };
		var doi = new Doi({
			root: component.root,
			store: component.store,
			data: doi_initial_data
		});

		return {
			c: function c() {
				div = createElement("div");
				doi._fragment.c();
			},
			m: function m(target, anchor) {
				insertNode(div, target, anchor);
				doi._mount(div, null);
			},
			p: function p(changed, ctx) {
				var doi_changes = {};
				if (changed.entry) doi_changes.doi = ctx.entry.entryTags.doi;
				doi._set(doi_changes);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				doi.destroy();
			}
		};
	}

	function Publication(options) {
		init(this, options);
		this._state = assign(data$5(), options.data);
		this._intro = true;

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$9(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(Publication.prototype, proto);

	/* src/components/PublicationList.html generated by Svelte v2.9.4 */

	function data$6() {
		return { entries: [] };
	}
	function oncreate() {
		var _this = this;

		fetch('./data/references.bib').then(function (response) {
			return response.text();
		}).then(function (text) {
			var rawEntries = bibtexParse.toJSON(text);
			_this.set({ entries: rawEntries.filter(function (e) {
					return e.entryType === 'Article' || e.entryType === 'InProceedings';
				}).sort(function (a, b) {
					return a.entryTags.year < b.entryTags.year;
				}) });
		});
	}
	function create_main_fragment$a(component, ctx) {
		var h4, text_1, ul;

		var each_value = ctx.entries;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$2(component, get_each_context$2(ctx, each_value, i));
		}

		return {
			c: function c() {
				h4 = createElement("h4");
				h4.innerHTML = "<span>Publications</span>";
				text_1 = createText("\n");
				ul = createElement("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				h4.className = "uk-heading-line";
				ul.className = "uk-list uk-list-divider";
			},
			m: function m(target, anchor) {
				insertNode(h4, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(ul, target, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}
			},
			p: function p(changed, ctx) {
				if (changed.entries) {
					each_value = ctx.entries;

					for (var i = 0; i < each_value.length; i += 1) {
						var child_ctx = get_each_context$2(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block$2(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},
			d: function d(detach) {
				if (detach) {
					detachNode(h4);
					detachNode(text_1);
					detachNode(ul);
				}

				destroyEach(each_blocks, detach);
			}
		};
	}

	// (3:2) {#each entries as e}
	function create_each_block$2(component, ctx) {
		var li;

		var publication_initial_data = { entry: ctx.e };
		var publication = new Publication({
			root: component.root,
			store: component.store,
			data: publication_initial_data
		});

		return {
			c: function c() {
				li = createElement("li");
				publication._fragment.c();
			},
			m: function m(target, anchor) {
				insertNode(li, target, anchor);
				publication._mount(li, null);
			},
			p: function p(changed, ctx) {
				var publication_changes = {};
				if (changed.entries) publication_changes.entry = ctx.e;
				publication._set(publication_changes);
			},
			d: function d(detach) {
				if (detach) {
					detachNode(li);
				}

				publication.destroy();
			}
		};
	}

	function get_each_context$2(ctx, list, i) {
		var child_ctx = Object.create(ctx);
		child_ctx.e = list[i];
		child_ctx.each_value = list;
		child_ctx.e_index = i;
		return child_ctx;
	}

	function PublicationList(options) {
		var _this2 = this;

		init(this, options);
		this._state = assign(data$6(), options.data);
		this._intro = true;

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$a(this, this._state);

		this.root._oncreate.push(function () {
			oncreate.call(_this2);
			_this2.fire("update", { changed: assignTrue({}, _this2._state), current: _this2._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(PublicationList.prototype, proto);

	/* src/components/App.html generated by Svelte v2.9.4 */

	function create_main_fragment$b(component, ctx) {
		var div, text, text_1, text_2, text_3, text_5;

		var profile = new Profile({
			root: component.root,
			store: component.store
		});

		var aboutme = new AboutMe({
			root: component.root,
			store: component.store
		});

		var cv = new Cv({
			root: component.root,
			store: component.store
		});

		var publicationlist = new PublicationList({
			root: component.root,
			store: component.store
		});

		var misc = new Misc({
			root: component.root,
			store: component.store
		});

		var footer = new Footer({
			root: component.root,
			store: component.store
		});

		return {
			c: function c() {
				div = createElement("div");
				profile._fragment.c();
				text = createText("\n  ");
				aboutme._fragment.c();
				text_1 = createText("\n  ");
				cv._fragment.c();
				text_2 = createText("\n  ");
				publicationlist._fragment.c();
				text_3 = createText("\n  ");
				misc._fragment.c();
				text_5 = createText("\n");
				footer._fragment.c();
				div.className = "uk-container uk-container-small uk-margin";
			},
			m: function m(target, anchor) {
				insertNode(div, target, anchor);
				profile._mount(div, null);
				appendNode(text, div);
				aboutme._mount(div, null);
				appendNode(text_1, div);
				cv._mount(div, null);
				appendNode(text_2, div);
				publicationlist._mount(div, null);
				appendNode(text_3, div);
				misc._mount(div, null);
				insertNode(text_5, target, anchor);
				footer._mount(target, anchor);
			},


			p: noop,

			d: function d(detach) {
				if (detach) {
					detachNode(div);
				}

				profile.destroy();
				aboutme.destroy();
				cv.destroy();
				publicationlist.destroy();
				misc.destroy();
				if (detach) {
					detachNode(text_5);
				}

				footer.destroy(detach);
			}
		};
	}

	function App(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$b(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(App.prototype, proto);

	var _AppComponent = new App({
	  target: document.body
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
(function(){'use strict';function a(){}function b(a,b){for(var c in b)a[c]=b[c];return a}function c(a,b){for(var c in b)a[c]=1;return a}function d(a,b){b.appendChild(a)}function e(a,b,c){b.insertBefore(a,c)}function f(a){a.parentNode.removeChild(a)}function g(a){for(;a.previousSibling;)a.parentNode.removeChild(a.previousSibling)}function h(a,b){for(var c=0;c<a.length;c+=1)a[c]&&a[c].d(b)}function j(a){return document.createElement(a)}function k(a){return document.createTextNode(a)}function l(){return document.createComment('')}function i(a,b,c){a.setAttribute(b,c)}function m(){return Object.create(null)}function n(a,b){var c=a in this._handlers&&this._handlers[a].slice();if(c)for(var d,e=0;e<c.length;e+=1)if(d=c[e],!d.__calling)try{d.__calling=!0,d.call(this,b)}finally{d.__calling=!1}}function o(a,b){a._handlers=m(),a._bind=b._bind,a.options=b,a.root=b.root||a,a.store=b.store||a.root.store}function p(a){for(;a&&a.length;)a.shift()()}/* src/components/AboutMe.html generated by Svelte v2.9.4 */function q(){var b,c,d;return{c:function(){b=j('h4'),b.innerHTML='<span>About me</span>',c=k('\n  '),d=j('span'),d.innerHTML='I\'m a Ph.D. student working in the <a class="uk-link-muted" href="https://www.cgmi.uni-konstanz.de/" target="_blank">Visual Computing</a> group of Prof. Deussen at the University of Konstanz. My area of research is information visualization, with a focus on visualization of uncertainty. I\'m curious to work on challenging problems and understand their theoretical and mathematical foundations.',b.className='uk-heading-line',d.className='uk-text'},m:function(a,f){e(b,a,f),e(c,a,f),e(d,a,f)},p:a,d:function(a){a&&(f(b),f(c),f(d))}}}function r(a){o(this,a),this._state=b({},a.data),this._intro=!0,this._fragment=q(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Cv.html generated by Svelte v2.9.4 */function s(){return{entries:[{when:'2016-now',what:'Ph.D. in Computer Science',where:'Visual Computing Group - Prof. Deussen, University of Konstanz',desc:'Topic: Uncertainty Quantification and Analysis in Visual Computing'},{when:'2012-2015',what:'M.Sc. <u>with distinction</u> in Computer Science',where:'Karlsruhe Institute of Technology',desc:'Thesis: Superpixels for identifying structures in laparoscopic surgery'},{when:'02/2014-07/2014',what:'Voluntary Internship',where:'KUKA Laboratories GmbH',desc:'Efficient implementation of a RANSAC-based algorithm for object recognition in point- clouds. Automation of the build process for external libraries in a cross-platform environ- ment using CMake.'},{when:'2008-2012',what:'B.Sc. in Computer Science',where:'Karlsruhe Institute of Technology',desc:'Thesis: Visualization concept for laparoscopy using augmented reality'}]}}function t(a,b){for(var c,d,g,l=b.entries,m=[],n=0;n<l.length;n+=1)m[n]=u(a,v(b,l,n));return{c:function(){c=j('h4'),c.innerHTML='<span>CV</span>',d=k('\n'),g=j('ul');for(var a=0;a<m.length;a+=1)m[a].c();c.className='uk-heading-line',g.className='uk-list uk-list-divider'},m:function(a,b){e(c,a,b),e(d,a,b),e(g,a,b);for(var f=0;f<m.length;f+=1)m[f].m(g,null)},p:function(b,c){if(b.entries){l=c.entries;for(var d,e=0;e<l.length;e+=1)d=v(c,l,e),m[e]?m[e].p(b,d):(m[e]=u(a,d),m[e].c(),m[e].m(g,null));for(;e<m.length;e+=1)m[e].d(1);m.length=l.length}},d:function(a){a&&(f(c),f(d),f(g)),h(m,a)}}}// (3:2) {#each entries as e}
function u(a,b){var c,h,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A=b.e.when,B=b.e.what,C=b.e.where,D=b.e.desc;return{c:function(){c=j('li'),h=j('div'),l=j('div'),m=j('span'),n=k(A),o=k('\n      '),p=j('div'),q=j('div'),r=j('noscript'),s=k(' '),t=j('span'),u=k('// '),v=k(C),w=k('\n        '),x=j('div'),y=j('span'),z=k(D),m.className='uk-text-small',l.className='uk-width-1-6',t.className='uk-text-meta',y.className='uk-text-small',p.className='uk-width-expand',i(h,'uk-grid',!0)},m:function(a,b){e(c,a,b),d(h,c),d(l,h),d(m,l),d(n,m),d(o,h),d(p,h),d(q,p),d(r,q),r.insertAdjacentHTML('beforebegin',B),d(s,q),d(t,q),d(u,t),d(v,t),d(w,p),d(x,p),d(y,x),d(z,y)},p:function(a,b){a.entries&&A!==(A=b.e.when)&&(n.data=A),a.entries&&B!==(B=b.e.what)&&(g(r),r.insertAdjacentHTML('beforebegin',B)),a.entries&&C!==(C=b.e.where)&&(v.data=C),a.entries&&D!==(D=b.e.desc)&&(z.data=D)},d:function(a){a&&f(c)}}}function v(a,b,c){var d=Object.create(a);return d.e=b[c],d.each_value=b,d.e_index=c,d}function w(a){o(this,a),this._state=b(s(),a.data),this._intro=!0,this._fragment=t(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Footer.html generated by Svelte v2.9.4 */function x(){var b;return{c:function(){b=j('div'),b.innerHTML='<span class="uk-text-meta">\xA9 Jochen G\xF6rtler 2018.</span>',b.className='uk-background-muted uk-margin-top uk-padding-small uk-text-center'},m:function(a,c){e(b,a,c)},p:a,d:function(a){a&&f(b)}}}function y(a){o(this,a),this._state=b({},a.data),this._intro=!0,this._fragment=x(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Misc.html generated by Svelte v2.9.4 */function z(){var b,c,d,g,h;return{c:function(){b=j('h4'),b.innerHTML='<span>Misc</span>',c=k('\n'),d=j('p'),d.textContent='When I\'m not spending time with my family or working, you often find me with friends in the mountains going backcountry skiing or climbing. I also enjoy traveling and exploring new places. Below are some photos that I took along the way.',g=k('\n'),h=j('div'),h.innerHTML='<div><img data-src="images/ny.jpg" alt="Manhattan skyline from Brooklyn Bridge" uk-img=""></div>\n  <div class="uk-margin-left"><img data-src="images/stein.jpg" alt="Skitouring in the Swiss alps" uk-img=""></div>\n  <div class="uk-margin-left"><img data-src="images/qingdao.jpg" alt="Lighthouse in Qingdao" uk-img=""></div>\n  <div class="uk-margin-left"><img data-src="images/zimba.jpg" alt="View of the Austrian alps" uk-img=""></div>',b.className='uk-heading-line',d.className='uk-text',h.className='uk-flex uk-flex-center@s'},m:function(a,f){e(b,a,f),e(c,a,f),e(d,a,f),e(g,a,f),e(h,a,f)},p:a,d:function(a){a&&(f(b),f(c),f(d),f(g),f(h))}}}function A(a){o(this,a),this._state=b({},a.data),this._intro=!0,this._fragment=z(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Profile.html generated by Svelte v2.9.4 */function B(){var a=j('style');a.id='svelte-1p1juv7-style',a.textContent='.svelte-ref-portrait.svelte-1p1juv7{border-radius:50%;border:1px solid #e5e5e5}',d(a,document.head)}function C(b){var c,g,h,l,m,n;return{c:function(){c=j('div'),c.innerHTML='<h2>Jochen G\xF6rtler</h2>',g=k('\n'),h=j('div'),l=j('img'),m=k('\n'),n=j('div'),n.innerHTML='<div class="uk-grid-collapse  uk-text-center" uk-grid=""><div class="uk-padding-small"><a href="mailto:info@jgoertler.com" target="_blank"><span uk-icon="icon: mail"></span> Mail</a></div>\n    <div class="uk-padding-small"><a href="https://www.github.com/grtlr" target="_blank"><span uk-icon="icon: github-alt"></span> Github</a></div>\n    <div class="uk-padding-small"><a href="https://www.cgmi.uni-konstanz.de/personen/wissenschaftliche-mitarbeiterinnen/jochen-goertler/" target="_blank"><span uk-icon="icon: location"></span> University of Konstanz</a></div>\n    <div class="uk-padding-small"><a href="https://scholar.google.de/citations?user=PjRS0WAAAAAJ" target="_blank"><span uk-icon="icon: google"></span> Google Scholar</a></div></div>',c.className='uk-container uk-text-center',l.dataset.src='./images/portrait.png',l.width='100',l.height='auto',l.alt='Portrait',i(l,'uk-img',!0),l.className='svelte-1p1juv7 svelte-ref-portrait',h.className='uk-container uk-text-center',n.className='uk-flex uk-flex-center uk-margin-bottom'},m:function(a,f){e(c,a,f),e(g,a,f),e(h,a,f),d(l,h),b.refs.portrait=l,e(m,a,f),e(n,a,f)},p:a,d:function(a){a&&(f(c),f(g),f(h)),b.refs.portrait===l&&(b.refs.portrait=null),a&&(f(m),f(n))}}}function D(a){o(this,a),this.refs={},this._state=b({},a.data),this._intro=!0,document.getElementById('svelte-1p1juv7-style')||B(),this._fragment=C(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Authors.html generated by Svelte v2.9.4 */function E(a){var b=a.authors;return b.replace('-',' ').split(' and ')}function F(){return{authors:''}}function G(a){var b=a.split(' '),c=b.pop(),d=b.map(function(a){return a[0]}).join('');return d+' '+c}function H(a,b){for(var c,d=b.authorList,g=[],j=0;j<d.length;j+=1)g[j]=I(a,L(b,d,j));return{c:function(){for(var a=0;a<g.length;a+=1)g[a].c();c=l()},m:function(a,b){for(var d=0;d<g.length;d+=1)g[d].m(a,b);e(c,a,b)},p:function(b,e){if(b.authorList){d=e.authorList;for(var f,h=0;h<d.length;h+=1)f=L(e,d,h),g[h]?g[h].p(b,f):(g[h]=I(a,f),g[h].c(),g[h].m(c.parentNode,c));for(;h<g.length;h+=1)g[h].d(1);g.length=d.length}},d:function(a){h(g,a),a&&f(c)}}}// (1:0) {#each authorList as a, idx}
function I(a,b){function c(a){return a.idx<a.authorList.length-1?J:K}var d,g=c(b),h=g(a,b);return{c:function(){h.c(),d=l()},m:function(a,b){h.m(a,b),e(d,a,b)},p:function(b,e){g===(g=c(e))&&h?h.p(b,e):(h.d(1),h=g(a,e),h.c(),h.m(d.parentNode,d))},d:function(a){h.d(a),a&&f(d)}}}// (2:0) {#if idx < authorList.length - 1}
function J(a,b){var c,d=G(b.a)+', ';return{c:function(){c=k(d)},m:function(a,b){e(c,a,b)},p:function(a,b){a.authorList&&d!=(d=G(b.a)+', ')&&(c.data=d)},d:function(a){a&&f(c)}}}// (4:0) {:else}
function K(a,b){var c,d=G(b.a);return{c:function(){c=k(d)},m:function(a,b){e(c,a,b)},p:function(a,b){a.authorList&&d!==(d=G(b.a))&&(c.data=d)},d:function(a){a&&f(c)}}}function L(a,b,c){var d=Object.create(a);return d.a=b[c],d.each_value=b,d.idx=c,d}function M(a){o(this,a),this._state=b(F(),a.data),this._recompute({authors:1},this._state),this._intro=!0,this._fragment=H(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Doi.html generated by Svelte v2.9.4 */function N(){return{doi:''}}function O(b,c){var g,h,l,m,n,o;return{c:function(){g=j('a'),h=j('span'),l=j('span'),m=k(' '),n=k(c.doi),i(l,'uk-icon','icon: world; ratio: 0.7'),h.className='uk-text-small',g.href=o='https://doi.org/'+c.doi,g.target='_blank'},m:function(a,b){e(g,a,b),d(h,g),d(l,h),d(m,h),d(n,h)},p:function(a,b){a.doi&&(n.data=b.doi),a.doi&&o!==(o='https://doi.org/'+b.doi)&&(g.href=o)},d:function(a){a&&f(g)}}}function P(a){o(this,a),this._state=b(N(),a.data),this._intro=!0,this._fragment=O(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/InProceedings.html generated by Svelte v2.9.4 */function Q(){return{booktitle:'',pages:''}}function R(a,b){var c,d,g;return{c:function(){c=k(b.booktitle),d=k(': '),g=k(b.pages)},m:function(a,b){e(c,a,b),e(d,a,b),e(g,a,b)},p:function(a,b){a.booktitle&&(c.data=b.booktitle),a.pages&&(g.data=b.pages)},d:function(a){a&&(f(c),f(d),f(g))}}}function S(a){o(this,a),this._state=b(Q(),a.data),this._intro=!0,this._fragment=R(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Journal.html generated by Svelte v2.9.4 */function T(){return{journal:'',volume:'',number:'',pages:'',year:''}}function U(a,b){var c,d,g,h,i,j,l,m,n,o;return{c:function(){c=k(b.journal),d=k(', '),g=k(b.volume),h=k('('),i=k(b.number),j=k('): '),l=k(b.pages),m=k(' ('),n=k(b.year),o=k(')')},m:function(a,b){e(c,a,b),e(d,a,b),e(g,a,b),e(h,a,b),e(i,a,b),e(j,a,b),e(l,a,b),e(m,a,b),e(n,a,b),e(o,a,b)},p:function(a,b){a.journal&&(c.data=b.journal),a.volume&&(g.data=b.volume),a.number&&(i.data=b.number),a.pages&&(l.data=b.pages),a.year&&(n.data=b.year)},d:function(a){a&&(f(c),f(d),f(g),f(h),f(i),f(j),f(l),f(m),f(n),f(o))}}}function V(a){o(this,a),this._state=b(T(),a.data),this._intro=!0,this._fragment=U(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor))}/* src/components/Publication.html generated by Svelte v2.9.4 */function W(){return{entry:{}}}function X(a){return a.replace('{','').replace('}','')}function Y(a){return a.replace('--','-')}function Z(a,b){function c(a){return a.entry.entryTags.journal?$:a.entry.entryTags.booktitle?_:null}var g,h,i,l,m,n,o,p,q,r,s,t=b.entry.entryTags.title,u={authors:b.entry.entryTags.author},v=new M({root:a.root,store:a.store,data:u}),w=c(b),x=w&&w(a,b),y=b.entry.entryTags.doi&&aa(a,b);return{c:function(){g=j('div'),h=j('div'),i=j('span'),l=k(t),m=k('\n  '),n=j('div'),o=j('span'),v._fragment.c(),p=k('\n  '),q=j('div'),r=j('span'),x&&x.c(),s=k('\n  '),y&&y.c(),i.className='uk-text',o.className='uk-text uk-text-small',r.className='uk-text-small'},m:function(a,b){e(g,a,b),d(h,g),d(i,h),d(l,i),d(m,g),d(n,g),d(o,n),v._mount(o,null),d(p,g),d(q,g),d(r,q),x&&x.m(r,null),d(s,g),y&&y.m(g,null)},p:function(b,d){b.entry&&t!==(t=d.entry.entryTags.title)&&(l.data=t);var e={};b.entry&&(e.authors=d.entry.entryTags.author),v._set(e),w===(w=c(d))&&x?x.p(b,d):(x&&x.d(1),x=w&&w(a,d),x&&x.c(),x&&x.m(r,null)),d.entry.entryTags.doi?y?y.p(b,d):(y=aa(a,d),y.c(),y.m(g,null)):y&&(y.d(1),y=null)},d:function(a){a&&f(g),v.destroy(),x&&x.d(),y&&y.d()}}}// (5:4) {#if entry.entryTags.journal}
function $(a,b){var c={journal:X(b.entry.entryTags.journal),volume:b.entry.entryTags.volume,number:b.entry.entryTags.number,pages:Y(b.entry.entryTags.pages),year:b.entry.entryTags.year},d=new V({root:a.root,store:a.store,data:c});return{c:function(){d._fragment.c()},m:function(a,b){d._mount(a,b)},p:function(a,b){var c={};a.entry&&(c.journal=X(b.entry.entryTags.journal)),a.entry&&(c.volume=b.entry.entryTags.volume),a.entry&&(c.number=b.entry.entryTags.number),a.entry&&(c.pages=Y(b.entry.entryTags.pages)),a.entry&&(c.year=b.entry.entryTags.year),d._set(c)},d:function(a){d.destroy(a)}}}// (13:39) 
function _(a,b){var c={booktitle:b.entry.entryTags.booktitle,pages:Y(b.entry.entryTags.pages)},d=new S({root:a.root,store:a.store,data:c});return{c:function(){d._fragment.c()},m:function(a,b){d._mount(a,b)},p:function(a,b){var c={};a.entry&&(c.booktitle=b.entry.entryTags.booktitle),a.entry&&(c.pages=Y(b.entry.entryTags.pages)),d._set(c)},d:function(a){d.destroy(a)}}}// (20:2) {#if entry.entryTags.doi}
function aa(a,b){var c,d={doi:b.entry.entryTags.doi},g=new P({root:a.root,store:a.store,data:d});return{c:function(){c=j('div'),g._fragment.c()},m:function(a,b){e(c,a,b),g._mount(c,null)},p:function(a,b){var c={};a.entry&&(c.doi=b.entry.entryTags.doi),g._set(c)},d:function(a){a&&f(c),g.destroy()}}}function ba(a){o(this,a),this._state=b(W(),a.data),this._intro=!0,a.root||(this._oncreate=[],this._beforecreate=[],this._aftercreate=[]),this._fragment=Z(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor),this._lock=!0,p(this._beforecreate),p(this._oncreate),p(this._aftercreate),this._lock=!1)}/* src/components/PublicationList.html generated by Svelte v2.9.4 */function ca(){return{entries:[]}}function da(){var a=this;fetch('./data/references.bib').then(function(a){return a.text()}).then(function(b){var c=la.toJSON(b);a.set({entries:c.filter(function(a){return'Article'===a.entryType||'InProceedings'===a.entryType}).sort(function(c,a){return c.entryTags.year<a.entryTags.year})})})}function ea(a,b){for(var c,d,g,l=b.entries,m=[],n=0;n<l.length;n+=1)m[n]=fa(a,ga(b,l,n));return{c:function(){c=j('h4'),c.innerHTML='<span>Publications</span>',d=k('\n'),g=j('ul');for(var a=0;a<m.length;a+=1)m[a].c();c.className='uk-heading-line',g.className='uk-list uk-list-divider'},m:function(a,b){e(c,a,b),e(d,a,b),e(g,a,b);for(var f=0;f<m.length;f+=1)m[f].m(g,null)},p:function(b,c){if(b.entries){l=c.entries;for(var d,e=0;e<l.length;e+=1)d=ga(c,l,e),m[e]?m[e].p(b,d):(m[e]=fa(a,d),m[e].c(),m[e].m(g,null));for(;e<m.length;e+=1)m[e].d(1);m.length=l.length}},d:function(a){a&&(f(c),f(d),f(g)),h(m,a)}}}// (3:2) {#each entries as e}
function fa(a,b){var c,d={entry:b.e},g=new ba({root:a.root,store:a.store,data:d});return{c:function(){c=j('li'),g._fragment.c()},m:function(a,b){e(c,a,b),g._mount(c,null)},p:function(a,b){var c={};a.entries&&(c.entry=b.e),g._set(c)},d:function(a){a&&f(c),g.destroy()}}}function ga(a,b,c){var d=Object.create(a);return d.e=b[c],d.each_value=b,d.e_index=c,d}function ha(a){var d=this;o(this,a),this._state=b(ca(),a.data),this._intro=!0,a.root||(this._oncreate=[],this._beforecreate=[],this._aftercreate=[]),this._fragment=ea(this,this._state),this.root._oncreate.push(function(){da.call(d),d.fire('update',{changed:c({},d._state),current:d._state})}),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor),this._lock=!0,p(this._beforecreate),p(this._oncreate),p(this._aftercreate),this._lock=!1)}/* src/components/App.html generated by Svelte v2.9.4 */function ia(b){var c,g,h,i,l,m,n=new D({root:b.root,store:b.store}),o=new r({root:b.root,store:b.store}),p=new w({root:b.root,store:b.store}),q=new ha({root:b.root,store:b.store}),s=new A({root:b.root,store:b.store}),t=new y({root:b.root,store:b.store});return{c:function(){c=j('div'),n._fragment.c(),g=k('\n  '),o._fragment.c(),h=k('\n  '),p._fragment.c(),i=k('\n  '),q._fragment.c(),l=k('\n  '),s._fragment.c(),m=k('\n'),t._fragment.c(),c.className='uk-container uk-container-small uk-margin'},m:function(a,b){e(c,a,b),n._mount(c,null),d(g,c),o._mount(c,null),d(h,c),p._mount(c,null),d(i,c),q._mount(c,null),d(l,c),s._mount(c,null),e(m,a,b),t._mount(a,b)},p:a,d:function(a){a&&f(c),n.destroy(),o.destroy(),p.destroy(),q.destroy(),s.destroy(),a&&f(m),t.destroy(a)}}}function ja(a){o(this,a),this._state=b({},a.data),this._intro=!0,a.root||(this._oncreate=[],this._beforecreate=[],this._aftercreate=[]),this._fragment=ia(this,this._state),a.target&&(this._fragment.c(),this._mount(a.target,a.anchor),this._lock=!0,p(this._beforecreate),p(this._oncreate),p(this._aftercreate),this._lock=!1)}var ka={destroy:function(b){this.destroy=a,this.fire('destroy'),this.set=a,this._fragment.d(!1!==b),this._fragment=null,this._state={}},get:function(){return this._state},fire:n,on:function(a,b){var c=this._handlers[a]||(this._handlers[a]=[]);return c.push(b),{cancel:function(){var a=c.indexOf(b);~a&&c.splice(a,1)}}},set:function(a){this._set(b({},a));this.root._lock||(this.root._lock=!0,p(this.root._beforecreate),p(this.root._oncreate),p(this.root._aftercreate),this.root._lock=!1)},_recompute:a,_set:function(a){var c=this._state,d={},e=!1;for(var f in a)this._differs(a[f],c[f])&&(d[f]=e=!0);e&&(this._state=b(b({},c),a),this._recompute(d,this._state),this._bind&&this._bind(d,this._state),this._fragment&&(this.fire('state',{changed:d,current:this._state,previous:c}),this._fragment.p(d,this._state),this.fire('update',{changed:d,current:this._state,previous:c})))},_mount:function(a,b){this._fragment[this._fragment.i?'i':'m'](a,b||null)},_differs:function(c,a){return c==c?c!==a||c&&'object'==typeof c||'function'==typeof c:a==a}};b(r.prototype,ka),b(w.prototype,ka),b(y.prototype,ka),b(A.prototype,ka),b(D.prototype,ka);var la=function(a,b){return b={exports:{}},a(b,b.exports),b.exports}(function(a,b){(function(a){function c(){this.months=['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'],this.notKey=[',','{','}',' ','='],this.pos=0,this.input='',this.entries=[],this.currentEntry='',this.setInput=function(a){this.input=a},this.getEntries=function(){return this.entries},this.isWhitespace=function(a){return' '==a||'\r'==a||'\t'==a||'\n'==a},this.match=function(a,b){if((null==b||null==b)&&(b=!0),this.skipWhitespace(b),this.input.substring(this.pos,this.pos+a.length)==a)this.pos+=a.length;else throw'Token mismatch, expected '+a+', found '+this.input.substring(this.pos);this.skipWhitespace(b)},this.tryMatch=function(a,b){return(null==b||null==b)&&(b=!0),this.skipWhitespace(b),this.input.substring(this.pos,this.pos+a.length)==a},this.matchAt=function(){for(;this.input.length>this.pos&&'@'!=this.input[this.pos];)this.pos++;return!('@'!=this.input[this.pos])},this.skipWhitespace=function(a){for(;this.isWhitespace(this.input[this.pos]);)this.pos++;if('%'==this.input[this.pos]&&!0==a){for(;'\n'!=this.input[this.pos];)this.pos++;this.skipWhitespace(a)}},this.value_braces=function(){var a=0;this.match('{',!1);for(var b=this.pos,c=!1;;){if(!c)if('}'==this.input[this.pos]){if(0<a)a--;else{var d=this.pos;return this.match('}',!1),this.input.substring(b,d)}}else if('{'==this.input[this.pos])a++;else if(this.pos>=this.input.length-1)throw'Unterminated value';c=!('\\'!=this.input[this.pos]||!1!=c),this.pos++}},this.value_comment=function(){for(var a='',b=0;!(this.tryMatch('}',!1)&&0==b);){if(a+=this.input[this.pos],'{'==this.input[this.pos]&&b++,'}'==this.input[this.pos]&&b--,this.pos>=this.input.length-1)throw'Unterminated value:'+this.input.substring(start);this.pos++}return a},this.value_quotes=function(){this.match('"',!1);for(var a=this.pos,b=!1;;){if(!b){if('"'==this.input[this.pos]){var c=this.pos;return this.match('"',!1),this.input.substring(a,c)}if(this.pos>=this.input.length-1)throw'Unterminated value:'+this.input.substring(a)}b=!('\\'!=this.input[this.pos]||!1!=b),this.pos++}},this.single_value=function(){var a=this.pos;if(this.tryMatch('{'))return this.value_braces();if(this.tryMatch('"'))return this.value_quotes();var b=this.key();if(b.match('^[0-9]+$'))return b;if(0<=this.months.indexOf(b.toLowerCase()))return b.toLowerCase();throw'Value expected:'+this.input.substring(a)+' for key: '+b},this.value=function(){for(var a=[this.single_value()];this.tryMatch('#');)this.match('#'),a.push(this.single_value());return a.join('')},this.key=function(a){for(var b=this.pos;;){if(this.pos>=this.input.length)throw'Runaway key';// а-яА-Я is Cyrillic
//console.log(this.input[this.pos]);
if(0<=this.notKey.indexOf(this.input[this.pos]))return a&&','!=this.input[this.pos]?(this.pos=b,null):this.input.substring(b,this.pos);this.pos++}},this.key_equals_value=function(){var a=this.key();if(this.tryMatch('=')){this.match('=');var b=this.value();return a=a.trim(),[a,b]}throw'... = value expected, equals sign missing:'+this.input.substring(this.pos)},this.key_value_list=function(){var a=this.key_equals_value();for(this.currentEntry.entryTags={},this.currentEntry.entryTags[a[0]]=a[1];this.tryMatch(',')&&(this.match(','),!this.tryMatch('}'));)a=this.key_equals_value(),this.currentEntry.entryTags[a[0]]=a[1]},this.entry_body=function(a){this.currentEntry={},this.currentEntry.citationKey=this.key(!0),this.currentEntry.entryType=a.substring(1),null!=this.currentEntry.citationKey&&this.match(','),this.key_value_list(),this.entries.push(this.currentEntry)},this.directive=function(){return this.match('@'),'@'+this.key()},this.preamble=function(){this.currentEntry={},this.currentEntry.entryType='PREAMBLE',this.currentEntry.entry=this.value_comment(),this.entries.push(this.currentEntry)},this.comment=function(){this.currentEntry={},this.currentEntry.entryType='COMMENT',this.currentEntry.entry=this.value_comment(),this.entries.push(this.currentEntry)},this.entry=function(a){this.entry_body(a)},this.alernativeCitationKey=function(){this.entries.forEach(function(a){!a.citationKey&&a.entryTags&&(a.citationKey='',a.entryTags.author&&(a.citationKey+=a.entryTags.author.split(',')[0]+=', '),a.citationKey+=a.entryTags.year)})},this.bibtex=function(){for(;this.matchAt();){var a=this.directive();this.match('{'),'@STRING'==a.toUpperCase()?this.string():'@PREAMBLE'==a.toUpperCase()?this.preamble():'@COMMENT'==a.toUpperCase()?this.comment():this.entry(a),this.match('}')}this.alernativeCitationKey()}}a.toJSON=function(a){var d=new c;return d.setInput(a),d.bibtex(),d.entries},a.toBibtex=function(a){var b='';for(var c in a){if(b+='@'+a[c].entryType,b+='{',a[c].citationKey&&(b+=a[c].citationKey+', '),a[c].entry&&(b+=a[c].entry),a[c].entryTags){var d='';for(var e in a[c].entryTags)0!=d.length&&(d+=', '),d+=e+'= {'+a[c].entryTags[e]+'}';b+=d}b+='}\n\n'}return b}})(b)}/* end bibtexParse */);b(M.prototype,ka),M.prototype._recompute=function(a,b){a.authors&&this._differs(b.authorList,b.authorList=E(b))&&(a.authorList=!0)},b(P.prototype,ka),b(S.prototype,ka),b(V.prototype,ka),b(ba.prototype,ka),b(ha.prototype,ka),b(ja.prototype,ka);new ja({// eslint-disable-line no-unused-vars
target:document.body})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> b472ff4... Polyfill for Google crawling
